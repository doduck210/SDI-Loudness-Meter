/* -LICENSE-START-
** Copyright (c) 2013 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation (the
** "Software") to use, reproduce, display, distribute, sub-license, execute,
** and transmit the Software, and to prepare derivative works of the Software,
** and to permit third-parties to whom the Software is furnished to do so, in
** accordance with:
**
** (1) if the Software is obtained from Blackmagic Design, the End User License
** Agreement for the Software Development Kit (“EULA”) available at
** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
**
** (2) if the Software is obtained from any third party, such licensing terms
** as notified by that third party,
**
** and all subject to the following:
**
** (3) the copyright notices in the Software and this entire statement,
** including the above license grant, this restriction and the following
** disclaimer, must be included in all copies of the Software, in whole or in
** part, and all derivative works of the Software, unless such copies or
** derivative works are solely in the form of machine-executable object code
** generated by a source language processor.
**
** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
**
** A copy of the Software is available free of charge at
** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
**
** -LICENSE-END-
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <unistd.h>
#include <fcntl.h>
#include <csignal>
#include <vector>
#include <deque>
#include <numeric>
#include <sstream>

#include <websocketpp/config/asio_no_tls_client.hpp>
#include <websocketpp/client.hpp>

#include "DeckLinkAPI.h"
#include "Capture.h"
#include "Config.h"
#include "AudioProcessor.h"

#ifdef ENABLE_VIDEO_PROCESSING
#include "VideoProcessor.h"
#endif

// WebSocket client
typedef websocketpp::client<websocketpp::config::asio_client> client;
using websocketpp::lib::bind;
using websocketpp::lib::placeholders::_1, websocketpp::lib::placeholders::_2;

static client g_ws_client;
static websocketpp::connection_hdl g_ws_hdl;
static bool g_ws_connected = false;
static pthread_mutex_t g_ws_mutex;
static pthread_t g_ws_thread;
static std::string g_ws_uri = "ws://127.0.0.1:8080";
static bool g_ws_started = false;
static bool		 g_do_exit = false;

// Processors
static AudioProcessor g_audioProcessor;
#ifdef ENABLE_VIDEO_PROCESSING
static VideoProcessor g_videoProcessor;
#endif

static pthread_mutex_t	 g_sleepMutex;
static pthread_cond_t	 g_sleepCond;
static BMDConfig		 g_config;
static IDeckLinkInput*		 g_deckLinkInput = NULL;

void* ws_thread_func(void* /*arg*/) {
    try {
        g_ws_client.run();
    } catch (const std::exception & e) {
        fprintf(stderr, "WebSocket thread exception: %s\n", e.what());
    } catch (websocketpp::lib::error_code e) {
        fprintf(stderr, "WebSocket thread error: %s\n", e.message().c_str());
    } catch (...) {
        fprintf(stderr, "WebSocket thread unknown exception.\n");
    }
    return NULL;
}

void send_ws_message(const std::string& msg) {
    if (g_do_exit) return;
    pthread_mutex_lock(&g_ws_mutex);
    if (g_ws_connected) {
        websocketpp::lib::error_code ec;
        g_ws_client.send(g_ws_hdl, msg, websocketpp::frame::opcode::text, ec);
        if (ec) {
            fprintf(stderr, "WebSocket send failed: %s\n", ec.message().c_str());
        }
    }
    pthread_mutex_unlock(&g_ws_mutex);
}

void on_ws_open(client* c, websocketpp::connection_hdl hdl) {
    pthread_mutex_lock(&g_ws_mutex);
    g_ws_connected = true;
    g_ws_hdl = hdl;
    pthread_mutex_unlock(&g_ws_mutex);
    fprintf(stderr, "WebSocket connection opened.\n");
    fflush(stderr);
}

void on_ws_close(client* c, websocketpp::connection_hdl hdl) {
    pthread_mutex_lock(&g_ws_mutex);
    g_ws_connected = false;
    pthread_mutex_unlock(&g_ws_mutex);
    fprintf(stderr, "WebSocket connection closed.\n");
    fflush(stderr);
}

void on_ws_message(client* c, websocketpp::connection_hdl hdl, client::message_ptr msg) {
    std::string payload = msg->get_payload();
    if (payload.find("\"command\"") != std::string::npos && payload.find("\"start_integration\"") != std::string::npos) {
        g_audioProcessor.startIntegration();
    } else if (payload.find("\"command\"") != std::string::npos && payload.find("\"stop_integration\"") != std::string::npos) {
        g_audioProcessor.stopIntegration();
    }
}

DeckLinkCaptureDelegate::DeckLinkCaptureDelegate() :
	m_refCount(1),
    m_pixelFormat(g_config.m_pixelFormat)
{
}

ULONG DeckLinkCaptureDelegate::AddRef(void)
{
	return __sync_add_and_fetch(&m_refCount, 1);
}

ULONG DeckLinkCaptureDelegate::Release(void)
{
	int32_t newRefValue = __sync_sub_and_fetch(&m_refCount, 1);
	if (newRefValue == 0)
	{
		delete this;
		return 0;
	}
	return newRefValue;
}

HRESULT DeckLinkCaptureDelegate::VideoInputFrameArrived(IDeckLinkVideoInputFrame* videoFrame, IDeckLinkAudioInputPacket* audioFrame)
{
    if (videoFrame) {
        if (videoFrame->GetFlags() & bmdFrameHasNoInputSource) {
            fprintf(stderr, "No input signal detected\n");
        } else {
            #ifdef ENABLE_VIDEO_PROCESSING
            g_videoProcessor.processFrame(videoFrame);
            #endif
        }
    }

    if (audioFrame)
    {
        g_audioProcessor.processAudioPacket(audioFrame);
    }
	return S_OK;
}

HRESULT DeckLinkCaptureDelegate::VideoInputFormatChanged(BMDVideoInputFormatChangedEvents events, IDeckLinkDisplayMode* mode, BMDDetectedVideoInputFormatFlags formatFlags)
{
	HRESULT	result;
	char* displayModeName = NULL;
	BMDPixelFormat pixelFormat = m_pixelFormat;

	if (events & bmdVideoInputColorspaceChanged)
	{
		if (formatFlags & bmdDetectedVideoInputRGB444)
			pixelFormat = bmdFormat10BitRGB;
		else if (formatFlags & bmdDetectedVideoInputYCbCr422)
			pixelFormat = (g_config.m_pixelFormat == bmdFormat8BitYUV) ? bmdFormat8BitYUV : bmdFormat10BitYUV;
		else
			goto bail;
	}

	if ((events & bmdVideoInputDisplayModeChanged) || (m_pixelFormat != pixelFormat))
	{
		mode->GetName((const char**)&displayModeName);
		printf("Video format changed to %s %s\n", displayModeName, formatFlags & bmdDetectedVideoInputRGB444 ? "RGB" : "YUV");

		if (displayModeName)
			free(displayModeName);

		if (g_deckLinkInput)
		{
			g_deckLinkInput->StopStreams();
			result = g_deckLinkInput->EnableVideoInput(mode->GetDisplayMode(), pixelFormat, g_config.m_inputFlags);
			if (result != S_OK)
			{
				fprintf(stderr, "Failed to switch video mode\n");
				goto bail;
			}

			g_deckLinkInput->StartStreams();
		}
		m_pixelFormat = pixelFormat;
	}

bail:
	return S_OK;
}

static void sigfunc(int signum)
{
	if (signum == SIGINT || signum == SIGTERM)
		 g_do_exit = true;

	pthread_cond_signal(&g_sleepCond);
}

int main(int argc, char *argv[])
{
	HRESULT result;
	int exitStatus = 1;
	IDeckLinkIterator* deckLinkIterator = NULL;
	IDeckLink* deckLink = NULL;
	IDeckLinkProfileAttributes* deckLinkAttributes = NULL;
	bool formatDetectionSupported;
	IDeckLinkDisplayMode* displayMode = NULL;
	DeckLinkCaptureDelegate* delegate = NULL;

	pthread_mutex_init(&g_sleepMutex, NULL);
	pthread_cond_init(&g_sleepCond, NULL);
	pthread_mutex_init(&g_ws_mutex, NULL);

	signal(SIGINT, sigfunc);
	signal(SIGTERM, sigfunc);
	signal(SIGHUP, sigfunc);

	if (!g_config.ParseArguments(argc, argv))
	{
		g_config.DisplayUsage(exitStatus);
		goto bail;
	}

    try {
        g_ws_client.clear_access_channels(websocketpp::log::alevel::all);
        g_ws_client.set_access_channels(websocketpp::log::alevel::connect | websocketpp::log::alevel::disconnect);
        g_ws_client.set_error_channels(websocketpp::log::elevel::all);
        g_ws_client.init_asio();
        g_ws_client.set_open_handler(bind(&on_ws_open, &g_ws_client, ::_1));
        g_ws_client.set_close_handler(bind(&on_ws_close, &g_ws_client, ::_1));
        g_ws_client.set_message_handler(bind(&on_ws_message, &g_ws_client, ::_1, ::_2));
        websocketpp::lib::error_code ec;
        client::connection_ptr con = g_ws_client.get_connection(g_ws_uri, ec);
        if (ec) { fprintf(stderr, "Could not create connection: %s\n", ec.message().c_str()); goto bail; }
        g_ws_client.connect(con);
        pthread_create(&g_ws_thread, NULL, ws_thread_func, NULL);
        g_ws_started = true;
    } catch (const std::exception & e) {
        fprintf(stderr, "WebSocket setup exception: %s\n", e.what());
        goto bail;
    } catch (...) {
        fprintf(stderr, "WebSocket setup unknown exception.\n");
        goto bail;
    }

	if (!g_audioProcessor.initialize(g_config, send_ws_message)) { 
		fprintf(stderr, "Failed to initialize audio processor\n"); 
		goto bail; 
	}

	deckLink = g_config.GetSelectedDeckLink();
	if (deckLink == NULL) { fprintf(stderr, "Unable to get DeckLink device %u\n", g_config.m_deckLinkIndex); goto bail; }

	if (deckLink->QueryInterface(IID_IDeckLinkInput, (void**)&g_deckLinkInput) != S_OK) { fprintf(stderr, "The selected device does not have an input interface\n"); goto bail; }

    if (g_config.m_displayModeIndex == -1) {
        if (deckLink->QueryInterface(IID_IDeckLinkProfileAttributes, (void**)&deckLinkAttributes) == S_OK) {
            if (deckLinkAttributes->GetFlag(BMDDeckLinkSupportsInputFormatDetection, &formatDetectionSupported) == S_OK && formatDetectionSupported) {
                g_config.m_inputFlags |= bmdVideoInputEnableFormatDetection;
            }
            deckLinkAttributes->Release();
        }
    }

    displayMode = g_config.GetSelectedDeckLinkDisplayMode(deckLink);
    if (displayMode == NULL) { fprintf(stderr, "Error: Could not find a valid display mode.\n"); goto bail; }

	delegate = new DeckLinkCaptureDelegate();
	g_deckLinkInput->SetCallback(delegate);

    #ifdef ENABLE_VIDEO_PROCESSING
    fprintf(stderr, "Video processing is enabled.\n");
    #endif

    // Start capturing
    while (!g_do_exit) {
        result = g_deckLinkInput->EnableVideoInput(displayMode->GetDisplayMode(), g_config.m_pixelFormat, g_config.m_inputFlags);
        if (result != S_OK) { fprintf(stderr, "Failed to enable video input. Is a video signal connected?\n"); goto bail; }

        #ifdef ENABLE_VIDEO_PROCESSING
        BMDTimeValue timeScale, frameDuration;
        displayMode->GetFrameRate(&frameDuration, &timeScale);
        if (!g_videoProcessor.initialize(displayMode->GetWidth(), displayMode->GetHeight(), timeScale, frameDuration, g_config.m_pixelFormat)) {
            fprintf(stderr, "Failed to initialize video processor\n");
            goto bail;
        }
        #endif

        result = g_deckLinkInput->EnableAudioInput(bmdAudioSampleRate48kHz, g_config.m_audioSampleDepth, g_config.m_audioChannels);
        if (result != S_OK) { fprintf(stderr, "Failed to enable audio input.\n"); goto bail; }

        result = g_deckLinkInput->StartStreams();
        if (result != S_OK) { fprintf(stderr, "Failed to start streams.\n"); goto bail; }

        fprintf(stderr, "Capture started. Press Ctrl+C to stop.\n");
        exitStatus = 0;

        pthread_mutex_lock(&g_sleepMutex);
        pthread_cond_wait(&g_sleepCond, &g_sleepMutex);
        pthread_mutex_unlock(&g_sleepMutex);

        fprintf(stderr, "\nStopping capture...\n");
        g_deckLinkInput->StopStreams();
        g_deckLinkInput->DisableAudioInput();
        g_deckLinkInput->DisableVideoInput();
    }


bail:
    if (g_ws_started) {
        if (g_ws_connected) {
            websocketpp::lib::error_code ec;
            g_ws_client.close(g_ws_hdl, websocketpp::close::status::going_away, "", ec);
        }
        if (!g_ws_client.stopped()) g_ws_client.stop();
        pthread_join(g_ws_thread, NULL);
    }

	if (displayMode != NULL) displayMode->Release();
	if (delegate != NULL) delegate->Release();
	if (g_deckLinkInput != NULL) { g_deckLinkInput->Release(); g_deckLinkInput = NULL; }
	if (deckLink != NULL) deckLink->Release();

	return exitStatus;
}